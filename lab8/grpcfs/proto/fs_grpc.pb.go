// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemClient interface {
	// Looks up a file/directory at the requested path.
	// For directories, is_dir is true, files lists each file/subdirectory in the
	// directory at path, and size is the number of files/subdirectories within
	// the directory.
	// For files, size gives the size of the file in bytes.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// Creates a file at the requested path in the file system of the server.
	// Should not overwrite existing files/directories.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Opens a file for reading at the server, which then takes read requests from
	// the client and responds with the contents.
	Reader(ctx context.Context, opts ...grpc.CallOption) (FileSystem_ReaderClient, error)
	// Opens a file for writing at the server, which then takes write requests
	// from the client and responds with the status of the operation.
	Writer(ctx context.Context, opts ...grpc.CallOption) (FileSystem_WriterClient, error)
	// Remove removes the file/directory at the requested path.
	// Contents of directories are recursively removed.
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Mkdir makes a directory at the requested path.
	// Should not overwrite existing files/directories.
	Mkdir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*MakeDirResponse, error)
}

type fileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemClient(cc grpc.ClientConnInterface) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/proto.FileSystem/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.FileSystem/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Reader(ctx context.Context, opts ...grpc.CallOption) (FileSystem_ReaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSystem_serviceDesc.Streams[0], "/proto.FileSystem/Reader", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemReaderClient{stream}
	return x, nil
}

type FileSystem_ReaderClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type fileSystemReaderClient struct {
	grpc.ClientStream
}

func (x *fileSystemReaderClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSystemReaderClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSystemClient) Writer(ctx context.Context, opts ...grpc.CallOption) (FileSystem_WriterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSystem_serviceDesc.Streams[1], "/proto.FileSystem/Writer", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemWriterClient{stream}
	return x, nil
}

type FileSystem_WriterClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteStatus, error)
	grpc.ClientStream
}

type fileSystemWriterClient struct {
	grpc.ClientStream
}

func (x *fileSystemWriterClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSystemWriterClient) Recv() (*WriteStatus, error) {
	m := new(WriteStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSystemClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.FileSystem/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Mkdir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*MakeDirResponse, error) {
	out := new(MakeDirResponse)
	err := c.cc.Invoke(ctx, "/proto.FileSystem/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServer is the server API for FileSystem service.
// All implementations must embed UnimplementedFileSystemServer
// for forward compatibility
type FileSystemServer interface {
	// Looks up a file/directory at the requested path.
	// For directories, is_dir is true, files lists each file/subdirectory in the
	// directory at path, and size is the number of files/subdirectories within
	// the directory.
	// For files, size gives the size of the file in bytes.
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Creates a file at the requested path in the file system of the server.
	// Should not overwrite existing files/directories.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Opens a file for reading at the server, which then takes read requests from
	// the client and responds with the contents.
	Reader(FileSystem_ReaderServer) error
	// Opens a file for writing at the server, which then takes write requests
	// from the client and responds with the status of the operation.
	Writer(FileSystem_WriterServer) error
	// Remove removes the file/directory at the requested path.
	// Contents of directories are recursively removed.
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Mkdir makes a directory at the requested path.
	// Should not overwrite existing files/directories.
	Mkdir(context.Context, *MakeDirRequest) (*MakeDirResponse, error)
	mustEmbedUnimplementedFileSystemServer()
}

// UnimplementedFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServer struct {
}

func (UnimplementedFileSystemServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedFileSystemServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileSystemServer) Reader(FileSystem_ReaderServer) error {
	return status.Errorf(codes.Unimplemented, "method Reader not implemented")
}
func (UnimplementedFileSystemServer) Writer(FileSystem_WriterServer) error {
	return status.Errorf(codes.Unimplemented, "method Writer not implemented")
}
func (UnimplementedFileSystemServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFileSystemServer) Mkdir(context.Context, *MakeDirRequest) (*MakeDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedFileSystemServer) mustEmbedUnimplementedFileSystemServer() {}

// UnsafeFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServer will
// result in compilation errors.
type UnsafeFileSystemServer interface {
	mustEmbedUnimplementedFileSystemServer()
}

func RegisterFileSystemServer(s grpc.ServiceRegistrar, srv FileSystemServer) {
	s.RegisterService(&_FileSystem_serviceDesc, srv)
}

func _FileSystem_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystem/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystem/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Reader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServer).Reader(&fileSystemReaderServer{stream})
}

type FileSystem_ReaderServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type fileSystemReaderServer struct {
	grpc.ServerStream
}

func (x *fileSystemReaderServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSystemReaderServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSystem_Writer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServer).Writer(&fileSystemWriterServer{stream})
}

type FileSystem_WriterServer interface {
	Send(*WriteStatus) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type fileSystemWriterServer struct {
	grpc.ServerStream
}

func (x *fileSystemWriterServer) Send(m *WriteStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSystemWriterServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSystem_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystem/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystem/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Mkdir(ctx, req.(*MakeDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _FileSystem_Lookup_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FileSystem_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _FileSystem_Remove_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _FileSystem_Mkdir_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Reader",
			Handler:       _FileSystem_Reader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Writer",
			Handler:       _FileSystem_Writer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fs.proto",
}
